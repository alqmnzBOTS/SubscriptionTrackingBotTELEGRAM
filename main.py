# –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# –ê–≤—Ç–æ—Ä: –í–∞—à–µ –ò–º—è (GitHub: alqmnzBOTS)

import os
import logging
from datetime import datetime, timedelta, date
import csv
import asyncio
from typing import List, Tuple

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from pyexpat.errors import messages
from sqlalchemy import create_engine, Column, Integer, String, Float, Date, Enum
from sqlalchemy.orm import sessionmaker, declarative_base, Session
from sqlalchemy.exc import SQLAlchemyError
import enum

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–∞ GitHub
CREATOR_GITHUB = "alqmnzBOTS"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite —Å SQLAlchemy)
Base = declarative_base()

class Period(enum.Enum):
    MONTHLY = 'monthly'
    YEARLY = 'yearly'

class Subscription(Base):
    __tablename__ = "subscriptions"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True)
    name = Column(String(100), nullable=False)
    amount = Column(Float, nullable=False)
    period = Column(Enum(Period), nullable=False)
    next_payment = Column(Date, nullable=False)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
engine = create_engine('sqlite:///subscriptions.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# FSM (Finite State Machine) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
class AddSubscription(StatesGroup):
    NAME = State()
    AMOUNT = State()
    PERIOD = State()
    NEXT_PAYMENT = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def calculate_monthly_cost(amount: float, period: Period) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
    return amount if period == Period.MONTHLY else amount / 12

async def get_user_subscriptions(user_id: int) -> List[Subscription]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with Session() as session:
        return session.query(Subscription).filter(Subscription.user_id == user_id).all()

async def save_subscription(user_id: int, data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î"""
    with Session() as session:
        subscription = Subscription(
            user_id=user_id,
            name=data['name'],
            amount=data['amount'],
            period=data['period'],
            next_payment=data['next_payment']
        )
        session.add(subscription)
        session.commit()

def generate_monthly_report(subscriptions: List[Subscription]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"""
    report = "üìä –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
    total_monthly = 0.0

    for sub in subscriptions:
        monthly_cost = calculate_monthly_cost(sub.amount, sub.period)
        total_monthly += monthly_cost

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if sub.next_payment.month == datetime.now().month:
            report += f"‚Ä¢ {sub.name}: {monthly_cost:.2f} ‚ÇΩ/–º–µ—Å\n"

    report += f"\nüí≥ –ò—Ç–æ–≥–æ –≤ –º–µ—Å—è—Ü: {total_monthly:.2f} ‚ÇΩ"
    return report

async def export_to_csv(user_id: int) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV-—Ñ–∞–π–ª"""
    filename = f"subscriptions_{user_id}.csv"
    subscriptions = await get_user_subscriptions(user_id)

    with open(filename, 'w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(['–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—É–º–º–∞', '–ü–µ—Ä–∏–æ–¥', '–°–ª–µ–¥. —Å–ø–∏—Å–∞–Ω–∏–µ'])

        for sub in subscriptions:
            writer.writerow([
                sub.name,
                sub.amount,
                sub.period.value,
                sub.next_payment.strftime("%Y-%m-%d")
            ])
    return filename

async def check_pending_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    now = datetime.now().date()
    tomorrow = now + timedelta(days=1)

    with Session() as session:
        subscriptions = session.query(Subscription).filter(
            Subscription.next_payment == tomorrow
        ).all()

        for sub in subscriptions:
            message = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ!\n\n"
                f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ:\n"
                f"‚Ä¢ {sub.name}: {sub.amount} ‚ÇΩ"
            )
            await bot.send_message(sub.user_id, message)

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—â–∏–∫ –∑–∞–¥–∞—á
async def scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
    while True:
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 10:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        if now.hour == 10 and now.minute == 0:
            await check_pending_payments()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ 1-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        if now.day == 1 and now.hour == 9 and now.minute == 0:
            with Session() as session:
                users = session.query(Subscription.user_id).distinct().all()
                for user_id in users:
                    subscriptions = await get_user_subscriptions(user_id[0])
                    if subscriptions:
                        report = generate_monthly_report(subscriptions)
                        await bot.send_message(user_id[0], report)
        await asyncio.sleep(60)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (Netflix, Spotify –∏ –¥—Ä.)\n\n"
        "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –î–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "- –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö\n"
        "- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
        "- –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
        "- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV\n\n"
        f"‚ö†Ô∏è –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: github.com/{CREATOR_GITHUB}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/list - –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/total - –æ–±—â–∞—è —Å—É–º–º–∞\n"
        "/report - –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
    )
    await message.answer(welcome_text)

@dp.message(F.text == "/add")
async def cmd_add(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Netflix):")
    await state.set_state(AddSubscription.NAME)

@dp.message(AddSubscription.NAME)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 599):")
    await state.set_state(AddSubscription.AMOUNT)

@dp.message(AddSubscription.AMOUNT)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text="–ï–∂–µ–º–µ—Å—è—á–Ω–æ"))
        builder.add(types.KeyboardButton(text="–ï–∂–µ–≥–æ–¥–Ω–æ"))
        builder.adjust(2)

        await message.answer(
            "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(AddSubscription.PERIOD)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")

@dp.message(AddSubscription.PERIOD)
async def process_period(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    period_map = {
        "–µ–∂–µ–º–µ—Å—è—á–Ω–æ": Period.MONTHLY,
        "–µ–∂–µ–≥–æ–¥–Ω–æ": Period.YEARLY
    }

    period = period_map.get(message.text.lower())
    if not period:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
        return

    await state.update_data(period=period)
    await message.answer(
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-01):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddSubscription.NEXT_PAYMENT)

@dp.message(AddSubscription.NEXT_PAYMENT)
async def process_next_payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        payment_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        if payment_date < date.today():
            await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º! –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        data = await state.get_data()
        await save_subscription(message.from_user.id, data | {"next_payment": payment_date})
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {payment_date.strftime('%d.%m.%Y')}"
        )
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î:")

@dp.message(F.text == "/list")
async def cmd_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    subscriptions = await get_user_subscriptions(message.from_user.id)
    if not subscriptions:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        return

    response = "üìã –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    for sub in subscriptions:
        period = "–º–µ—Å" if sub.period == Period.MONTHLY else "–≥–æ–¥"
        response += (
            f"‚Ä¢ {sub.name}: {sub.amount} ‚ÇΩ/{period}\n"
            f"  –°–ª–µ–¥. –ø–ª–∞—Ç–µ–∂: {sub.next_payment.strftime('%d.%m.%Y')}\n\n"
        )
    await message.answer(response)

@dp.message(F.text == "/total")
async def cmd_total(message: types.Message):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –ø–æ–¥–ø–∏—Å–æ–∫"""
    subscriptions = await get_user_subscriptions(message.from_user.id)
    if not subscriptions:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    total_monthly = sum(
        calculate_monthly_cost(sub.amount, sub.period)
        for sub in subscriptions
    )

    await message.answer(
        f"üí≥ –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n"
        f"‚Ä¢ –í –º–µ—Å—è—Ü: {total_monthly:.2f} ‚ÇΩ\n"
        f"‚Ä¢ –í –≥–æ–¥: {total_monthly * 12:.2f} ‚ÇΩ"
    )

@dp.message(F.text == "/report")
async def cmd_report(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç"""
    subscriptions = await get_user_subscriptions(message.from_user.id)
    if not subscriptions:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        return

    report = generate_monthly_report(subscriptions)
    await message.answer(report)

@dp.message(F.text == "/delete")
async def cmd_delete(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    subscriptions = await get_user_subscriptions(message.from_user.id)
    if not subscriptions:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    builder = InlineKeyboardBuilder()
    for sub in subscriptions:
        builder.add(types.InlineKeyboardButton(
            text=f"{sub.name} - {sub.amount}‚ÇΩ",
            callback_data=f"delete_{sub.id}"
        ))
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("delete_"))
async def delete_subscription(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_id = int(callback.data.split("_")[1])

    with Session() as session:
        subscription = session.get(Subscription, sub_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if subscription and subscription.user_id == callback.from_user.id:
            session.delete(subscription)
            session.commit()
            await callback.message.edit_text(
                f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ {subscription.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
            )
        else:
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)

    await callback.answer()

@dp.message(F.text == "/export")
async def cmd_export(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV"""
    try:
        filename = await export_to_csv(message.from_user.id)
        file = FSInputFile(filename)
        await message.answer_document(file, caption="–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CVS")
        os.remove(filename) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    except Exception as e:
        logger.error(f"Export error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç—Å–∫–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("Starting bot...")
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
